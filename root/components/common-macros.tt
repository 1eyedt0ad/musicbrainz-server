[%- USE u = Utils -%]
[%- MACRO create_guideline(text) BLOCK -%]
    <li>
        [%- text -%]
    </li>
[%- END -%]
[%#- This next could use localization for alternating comma/period use per locale -%]
[%- MACRO add_commas(n) GET n.chunk(-3).join(',') -%]
[%- MACRO url_escape(url) BLOCK; url | url; END -%]
[%- MACRO html_escape(url) BLOCK; url | html; END -%]
[%- MACRO make_ucfirst(text) BLOCK; text | ucfirst; END -%]
[%- MACRO make_widget(field, label) INCLUDE 'forms/generic/row.tt' field=form.field(field) label=label -%]
[%- USE UserDate(c.user.preferences) -%]
[%- MACRO doc_link(to) BLOCK -%][% c.uri_for('/doc', to) %][%- END -%]
[%- MACRO wiki_history_link(server, id, version) BLOCK -%]
http://[%- server -%]/[%- id -%]?oldid=[%- version -%]
[%- END -%]
[%- MACRO wiki_link(server, id) BLOCK -%]
http://[%- server -%]/[%- id -%]"
[%- END -%]
[%- MACRO l(text, args) BLOCK;
    c.gettext(text, args);
END; -%]
[%#- There is a bug in this implementation fo ngettext that is easier to fix by policy that's why it's not fixed yet.
The problem surfaces when an unfinished translation file is used, in this case a plural translation would
apply language-specific plural construction rules to the untranslated english string. If a translation language has
more than two plural forms, then the first plural form (germanic plural) is chosen for every form other than the first
two. -%]
[%- MACRO ln(text, plural, num, args) BLOCK;
    c.ngettext(text, plural, num, args);
END; -%]
[%- MACRO display_age(age) BLOCK -%]
    [%- IF age.0 -%][%- ln('{num} year', '{num}&nbsp;years', years, { num => age.0 }) -%]
    [%- ELSIF age.1 -%][%- ln('{num} month', '{num}&nbsp;months', months, { num => age.1 }) -%]
    [%- ELSE -%][%- ln('{num} day', '{num}&nbsp;days', days, { num => age.2 }) -%]
    [%- END -%]
[%- END -%]

[%- MACRO comma_list(items) BLOCK -%]
    [%- FOREACH item IN items -%]
        [%- item -%]
        [%- loop.count == (loop.size - 1) ? " and " : !loop.last ? ", " : "" -%]
    [%- END -%]
[%- END -%]
[%- MACRO form_id(field)
    IF field.form;
        "form-" _ field.form.name _ "-" _ field.name.replace('_', '-');
    ELSE;
        "form-$field";
    END -%]
[%- MACRO class_html(classes)
    IF classes.size; 'class="' _ classes.join(' ') _ '"';
    ELSE; '';
    END -%]
[%#- Take type and return pluralized word form, avoids problems with '|% type %|s' -#%]
[%- MACRO get_plural_type(entity)
    SWITCH entity;
        CASE 'release';
            l('releases');
        CASE 'artist';
            l('artists');
        CASE 'label';
            l('labels');
        CASE 'track';
            l('tracks');
        CASE 'editor';
            l('editors');
        CASE DEFAULT;
            l('Error: Unknown Type');
    END -%]

[%- MACRO disambiguation(entity) BLOCK;
    '<span>' _ html_escape("(${entity.comment})") _ '</span>' IF entity.comment;
END -%]

[%- MACRO artist_credit(ac, opts) BLOCK -%]
    [%- FOREACH name IN ac.names -%]
        [%- opts.plain ? html_escape(name.name) : link_artist(name.artist, 'show', name.name) -%]
        [%- name.join_phrase | html -%]
    [%- END -%]
[%- END -%]

[%- MACRO link_entity(entity, action, text) BLOCK;
    type = "$entity";
    IF    type.search('Entity::Artist='); link_artist(entity, action, text);
    ELSIF type.search('Entity::Work='); link_work(entity, action, text);
    ELSIF type.search('Entity::Label='); link_label(entity, action, text);
    ELSIF type.search('Entity::Release='); link_release(entity, action, text);
    ELSIF type.search('Entity::ReleaseGroup='); link_release_group(entity, action, text);
    ELSIF type.search('Entity::Recording='); link_recording(entity, action, text);
    ELSIF type.search('Entity::URL='); link_url(entity, action, text);
    END;
END -%]

[%- MACRO entity_type(entity) BLOCK;
    type = "$entity";
    IF    type.search('Entity::Artist='); "artist";
    ELSIF type.search('Entity::Work='); "work";
    ELSIF type.search('Entity::Label='); "label";
    ELSIF type.search('Entity::Release='); "release";
    ELSIF type.search('Entity::ReleaseGroup='); "release_group";
    ELSIF type.search('Entity::Recording='); "recording";
    ELSIF type.search('Entity::URL='); "url";
    END;
END -%]

[%- MACRO link_work(work, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/work/$action", [ work.gid ]);
    text = text || html_escape(work.name);
    '<span class="mp">' IF work.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF work.edits_pending AND action == 'show';
END -%]

[%- MACRO link_label(label, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/label/$action", [ label.gid ]);
    text = text || html_escape(label.name);
    '<span class="mp">' IF label.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF label.edits_pending AND action == 'show';
END -%]

[%- MACRO link_artist(artist, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/artist/$action", [ artist.gid ]);
    text = text || html_escape(artist.name);
    '<span class="mp">' IF artist.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF artist.edits_pending AND action == 'show';
END -%]

[%- MACRO link_release(release, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/release/$action", [ release.gid ]);
    text = text || html_escape(release.name);
    '<span class="mp">' IF release.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF release.edits_pending AND action == 'show';
END -%]

[%- MACRO link_release_group(rg, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/release_group/$action", [ rg.gid ]);
    text = text || html_escape(rg.name);
    '<span class="mp">' IF rg.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF rg.edits_pending AND action == 'show';
END -%]

[%- MACRO link_recording(recording, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/recording/$action", [ recording.gid ]);
    text = text || html_escape(recording.name);
    '<span class="mp">' IF recording.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF recording.edits_pending AND action == 'show';
END -%]

[%- MACRO link_tracklist(tracklist, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/tracklist/$action", [ tracklist.id ]);
    text = text || html_escape(tracklist.medium.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_url(url, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/url/$action", [ url.gid ]);
    text = text || html_escape(url.url);
    IF action != 'show';
      '<a href="' _ link _ '">' _ text _ '</a>';
    ELSE;
      '<a href="' _ url.url _ '">' _ url.url _ '</a > [<a href="' _ link _ '">' _ l('info') _ '</a>]';
    END;
END -%]

[%- MACRO link_tag(tag, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/tag/$action", [ tag.name ]);
    text = text || html_escape(tag.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_puid(puid, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/puid/$action", [ puid.name ]);
    text = text || html_escape(puid.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_cdtoc(cdtoc, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/cdtoc/$action", [ cdtoc.discid ]);
    text = text || html_escape(cdtoc.discid);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_cdstub(cdstub, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/cdstub/$action", [ cdstub.discid ]);
    text = text || html_escape(cdstub.discid);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_freedb(freedb, action, text) BLOCK;
    action = action || 'import';
    link = c.uri_for_action("/freedb/$action", [ freedb.discid ]);
    text = text || html_escape(freedb.discid);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_editor(editor, action, text) BLOCK;
    action = action || 'profile';
    link = c.uri_for_action("/user/$action", editor.name);
    text = text || html_escape(editor.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_edit(edit, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/edit/$action", [ edit.id ]);
    text = text || html_escape(edit.id);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO login_url(redirect) BLOCK;
    c.uri_for_action('/user/login', { uri => redirect || c.req.uri });
END-%]

[%- MACRO request_login(text) BLOCK -%]
<a href="[% login_url() %]">[% text || l('Log in') %]</a>
[%- END -%]

[%- MACRO rating_rate_url(entity, rating) BLOCK;
    c.uri_for_action("/rating/rate", {
        entity_type => entity_type(entity),
        entity_id   => entity.id,
        rating      => rating * 20,
    });
END -%]

[%- MACRO tagger_icon(release) BLOCK -%]
    [% USE date %]
    <a href="http://127.0.0.1:[% c.session.tport %]/openalbum?id=[% release.gid %]&t=[% date.now %]"
        target="tagger-iframe" class="tagger-icon" title="[% l('Open in tagger') %]">
        <img src="[% c.uri_for('/static/images/mblookup-tagger.png') %]" alt="[% l('Tagger') %]" />
    </a>
[%- END -%]


[%- MACRO rating_stars(entity) BLOCK -%]
<span class="inline-rating">
    <span class="star-rating small-star">
        [%- IF entity.user_rating -%]
        <span class="current-user-rating" style="width:[% entity.user_rating %]%;">[% 5 * entity.user_rating / 100 %]</span>
        [%- ELSIF entity.rating_count -%]
        <span class="current-rating" style="width:[% entity.rating %]%;">[% 5 * entity.rating / 100 %]</span>
        [%- END -%]
        [%- IF c.user_exists -%]
            [%- FOR rating IN [ 1 .. 5 ] -%]
            <a href="[% rating_rate_url(entity, entity.user_rating == 20 * rating ? 0 : rating) | html %]" class="stars-[% rating %]"
                title="[% ln('Rate: {rating} star', 'Rate: {rating} stars', rating, { rating => rating }) %]">[% rating %]</a>
            [%- END -%]
        [%- END -%]
    </span>
</span>
[%- END -%]

[%- MACRO piped_link_list(list) BLOCK -%]
[
[% FOR item IN list %]
  <a href="[% item.link %]">[% item.text %]</a> [% UNLESS loop.last %] | [% END %]
[% END %]
]
[%- END -%]

[%- MACRO release_label_list(labels) BLOCK;
    out = [];
    out.push(link_label(label.label)) FOR label=labels;
    out.join(', ');
END -%]

[%- MACRO release_catno_list(labels) BLOCK;
    out = [];
    out.push(label.catalog_number) FOR label=labels;
    out.join(', ');
END -%]

[%- MACRO sortble_table_header(name, label) BLOCK -%]
    <th>
        <a href="[% c.req.uri_with( order => order == name ? '-' _ name : name ) %]">[% label %]</a>
        [%- IF order == name %]&nbsp;&#9652;[% ELSIF order == '-' _ name %]&nbsp;&#9662;[% END %]
    </th>
[%- END -%]

[% MACRO entity_label(type) BLOCK;
    IF type == 'artist'; l('Artist:');
    ELSIF type == 'label'; l('Label:');
    ELSIF type == 'release'; l('Release:');
    ELSIF type == 'release_group'; l('Release group:');
    ELSIF type == 'recording'; l('Recording:');
    ELSIF type == 'work'; l('Work:');
    ELSIF type == 'url'; l('URL:');
    END;
END %]

[% MACRO use_in_relationship(entity) BLOCK;
    text = c.session.relationship ? l('Form relationship with {other}', { other => c.session.relationship.name })
                                  : l('Use in a relationship');
    link_entity(entity, 'relate', text);
END %]

[% MACRO quality_name(quality) SWITCH quality;
    CASE -1; l('unknown quality level');
    CASE 0;  l('low quality level');
    CASE 1;  l('default quality level');
    CASE 2;  l('high quality level');
END %]
