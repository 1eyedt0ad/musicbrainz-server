[%~ React.embed(c, 'edit/components/ListHeader', {
    isSearch => boolean_to_json(search),
    page => page,
    refineUrlArgs => React.to_json_object(refine_url_args),
    username => user,
}) ~%]

<div class="search-toggle c">
    <p>
        <strong>
          [%# guess_search is set here when we don't necessarily know the total
              number of entries on the first page (and usually a few after), due
              to there being more than the SQL LIMIT to start.

              We only use the 'at least' wording when guess_search is on in the
              case where it's truly unclear. That is, where the total number is
              the exact number that would have been found in any case with that
              many edits or more. That is: when there are exactly edit_count_limit
              edits more than the sum of all previous pages.

              In the case where this is not true, we unset guess_search so the
              paginator also knows this is an exact number of pages. -%]
          [% IF guess_search &&
                pager.total_entries == pager.entries_per_page * (pager.current_page - 1) + edit_count_limit %]
            [%- ln('Found at least {n} edit', 'Found at least {n} edits' ,
                    pager.total_entries,
                    { n => add_commas(pager.total_entries) }) -%]
          [% ELSE %]
            [%- ln('Found {n} edit', 'Found {n} edits' ,
                    pager.total_entries,
                    { n => add_commas(pager.total_entries) }) -%]
            [% SET guess_search = 0 %]
          [% END %]
        </strong>
    </p>
</div>

[% IF edits.size %]
    <div id="edits">
    [% WRAPPER 'components/with-pager.tt' search=0;
    # We always want search != 1 when calling the paginator from this template %]
        <form action="[% c.uri_for('/edit/enter_votes') %]" method="post">
            [%~ FOREACH edit=edits ~%]
                [%- edit_json_obj = React.to_json_object(edit); rendered_react_template = '' -%]

                [%~ React.embed(c, 'edit/components/ListEdit', {
                    edit => edit_json_obj,
                    index => loop.index,
                    voter => React.to_json_object(voter),
                }) ~%]

                [%- edit_json_obj.delete('display_data') -%]
            [%- END -%]

            <input type="hidden" name="url" value="[% c.req.uri %]" />

            [%~ IF c.user_exists ~%]
                <div class="align-right row no-label" >
                    [% form_submit(l('Submit votes &amp; edit notes')) %]
                </div>
            [%~ END ~%]
        </form>
    [% END %]
    </div>
[% ELSE %]
    [% IF search %]
        <p>[% l('No edits were found matching your query. Please {search|try again}.',
               { search => c.uri_for_action('/edit/search') }) %]</p>
    [% END %]
[% END %]

[% script_manifest('voting.js') %]

<script type="text/javascript">
  [% IF c.user.is_auto_editor %]
    MB.Control.EditList("#edits");
  [% END %]
</script>
