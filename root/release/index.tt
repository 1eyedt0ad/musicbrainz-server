[% BLOCK layout_head %]
    [% meta_desc = [] %]
    [% meta_desc.push(html_escape(release.comment)) IF release.comment %]
    [% meta_desc.push(l('Type:') _ ' ' _ html_escape(release.release_group.type_name)) IF release.release_group.type_name %]
    [% meta_desc.push(l('Format:') _ ' ' _ html_escape(release.combined_format_name)) IF release.combined_format_name %]
    [% year = release.events.slice(0,0).0.date.year IF release.events %]
    [% IF year %]
        [% meta_desc.push(l('Year:') _ ' ' _ html_escape(year)) %]
    [% END %]
    [% IF release.labels %]
        [% labels = [] %]
        [% FOR i=release.labels %]
            [% labels.push( (i.label.name ? i.label.name : "[unknown]") _ ( i.catalog_number ? (' (' _ i.catalog_number _ ')') : "")) %]
        [% END %]
        [% meta_desc.push((labels.size > 1 ? l('Labels:') : l('Label:')) _ ' ' _ html_escape(comma_only_list(labels))) %]
    [% END %]
    [% meta_desc.push(l('Barcode:') _ ' ' _ html_escape(release.barcode.format)) IF release.barcode %]
    [% meta_desc.push(l('Length:') _ ' ' _ html_escape(format_length(release.length))) IF release.length %]
    <meta name="description" content="[% comma_only_list(meta_desc) %]"/>
[% END %]

[%- WRAPPER 'release/layout.tt' page='index' -%]
    [%- INCLUDE 'release/annotation.tt' summary=1 -%]

    <h2 class="tracklist">[% l('Tracklist') %]</h2>
    <script>
MB.Release = (function (Release) {

  var ViewModel, Medium;

  Release.init = function(initialMedia) {
    Release.viewModel = new ViewModel(initialMedia);

    ko.bindingHandlers.foreachKv = {
      transformObject: function (obj) {
        if (obj === undefined) return [];
        return _.map(
          _.keys(obj).sort(),
          function (k) { return { key: k, value: obj[k] } }
        );
      },
      init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor()),
            properties = ko.bindingHandlers.foreachKv.transformObject(value);
        ko.applyBindingsToNode(element, { foreach: properties });
        return { controlsDescendantBindings: true };
      }
    };
    ko.virtualElements.allowedBindings.foreachKv = true;

    ko.applyBindings(Release.viewModel);
  };

  Medium = function(medium) {
    var model = this;

    model.name = ko.observable(medium.name);

    model.tracks = ko.observableArray(
      _.map(medium.tracks, function(track) {
        return new Track(track);
      })
    );

    model.format = ko.observable(medium.format);

    model.position = ko.observable(medium.position);

    model.positionName = ko.computed(function () {
      var name = "";

      name += (model.format() || "Medium");
      name += " " + model.position();

      if (model.name()) {
        name += ": " + model.name();
      }

      return name;
    });

    model.editsPending = ko.observable(medium.editsPending);

    return model;
  };

  Track = function (track) {
    var model = this;

    model.number = ko.observable(track.number);

    model.position = ko.observable(track.position);

    model.name = ko.observable(track.name);

    model.artistCredit = ko.observableArray(
      _.map(
        track.artistCredit,
        function (credit) {
          return {
            "joinPhrase": credit.joinPhrase,
            "name": credit.name
          };
        }
      )
    ); 

    model.length = ko.observable(track.length);

    model.editsPending = ko.observable(track.editsPending);

    model.recording = {
      "mbid": ko.observable(track.recording.mbid),
      "relationships": ko.observableArray(track.recording.relationships),
      "groupedRelationships": ko.computed({
        "read": function () {
          return computeGroupedRelationships(model.recording.relationships());
        },
        "deferEvaluation": true
      })
    };

    return model;
  };

  function computeGroupedRelationships(relationships) {
    var result = _.foldl(
      _.map(
        relationships,
        function (relationship) {
          var o = {};
 
          o[relationship.target.type] = {};
          o[relationship.target.type][relationship.phrase] = [
            { 
              target: MB.entity(relationship.target),
              groupedSubRelationships:
                computeGroupedRelationships(relationship.subRelationships)
            }
          ];

          return o;
        }
      ),
      mergeObjectArrays,
      {}
    );
 
    return result;
  }

  // Merge all values of object b into object a. The keys of b will then be a
  // proper subset of the keys a. If a already has a key that b has and that
  // value is a an array, b's value will be concatenated onto a's.
  // If a has a key and it is an object, then mergeObjectArrays will be called
  // recursively
  function mergeObjectArrays(a, b) {
    var newA = _.clone(a);

    _.each(
      _.keys(b),
      function(k) {
        if (newA.hasOwnProperty(k)) {
          if (_.isArray(b[k])) {
            newA[k] = a[k].concat(b[k]);
          }
          else {
            newA[k] = mergeObjectArrays(newA[k], b[k]);
          }
        }
        else {
          newA[k] = b[k];
        }
      }
    );

    return newA;
  }

  ViewModel = function (initialMedia) {
    var model = this;

    this.mediums = ko.observableArray(
      _.map(initialMedia, function(medium) {
        return new Medium(medium);
      })
    );

    this.showArtists = ko.computed(function () {
      var allArtistCredits = _.flatten(
        _.map(model.mediums(), function(medium) {
          return _.map(medium.tracks(), function (track) {
            return track.artistCredit();
          });
        })
      );

      var reference = _.head(allArtistCredits),
          subjects = _.tail(allArtistCredits);

      return subjects.length > 0 &&
        _.some(subjects, function(subject) {
          return !_.isEqual(subject, reference)
        });
    });

    return model;
  };

  return Release;

}(MB.Release || {}));
    </script>
    <style>
    table.tbl td { vertical-align: top }

    dl.ars, dl.ars dd, dl.ars dt {
        padding: 0;
        margin: 0;
        font-size: 11px;
    }

    dl.ars { margin-left: 2em; line-height: 2.2ex; }
    dl.ars dd { margin: 0.2em 0; }

    dl.ars dt {
        margin-right: 0.5em;
        clear: left;
        float: left;
        color: #555;
    }
    </style>

    <script type="text/html" id="relationship-group">
      <dt><!-- ko text: key --><!-- /ko -->:</dt>
      <dd data-bind="html: _.map(value, function(v) { return v.target.html() }).join(', ')">
      </dd>
    </script>

    <!-- ko with: MB.Release.viewModel -->
    <table class="tbl">
      <thead>
        <tr>
          <th class="pos t">#</th>
          <th>
            <span style="float: right; font-weight: normal; padding-right: 1em;">
              <a style="display: none;" class="bottom-credits" href="">
                [% l('Display Credits at Bottom') %]</a>
              <a style="display: none;" class="inline-credits" href="">
                [% l('Display Credits Inline') %]</a>
              <input style="display: none;" type="checkbox" id="bottom-credits" />
            </span>

            [% l('Title') %]
          </th>
          <!-- ko if: showArtists -->
            <th>[% l('Artist') %]</th>
          <!-- /ko -->
          <th class="rating c">[% l('Rating') %]</th>
          <th class="treleases">[% l('Length') %]</th>
        </tr>
      </thead>
      <tbody [%- rdfa_about_attr(rdfa_release_curi(release)) -%]>
        <!-- ko foreach: mediums -->
          <tr data-bind="css: { subh: true, mp: editsPending > 0}">
            <td>&#xa0;</td>
            <td data-bind="attr: { colspan: $root.showArtists ? 4 : 3 }">
              <a data-bind="text: positionName(), attr: { href: '#disc' + position() }"></a>
              <!-- [% rdfa_medium_in_release(release, medium) %] -->
            </td>
          </tr>

          <!-- ko foreach: tracks -->
          <tr rel="mo:track" data-bind="css: { ev: ($index() + 1) % 2 == 0, mp: editsPending > 0 }"
              id="[% track.gid %]"
              about="[% rdfa_track_curi(track) %]" typeof="[% rdfa_concept_curi('track') %]">
              <td class="pos t">
                <span style="display: none">[% rdfa_track_number(track.position) %]</span>
                <!-- ko text: number --><!-- /ko -->
              </td>
              <td>
                <a data-bind="text: name, attr: { href: '/recording/' + recording.mbid() }"></a>

                <!-- ko with: recording -->
                  <br/>
                  <div class="ars" style="display: none;" data-bind="foreachKv: groupedRelationships()">
                    <dl class="ars">
                      <!-- ko if: key == 'work' -->
                        <!-- ko foreachKv: value -->
                          <!-- ko foreach: value -->
                            <dt><!-- ko text: $parent.key --><!-- /ko -->:</dt>
                            <dd>
                              <a href="#" data-bind="text: target.name"></a>
                              <!-- ko foreachKv: groupedSubRelationships -->
                                <!-- ko if: key == 'artist' -->
                                  <dl class="ars">
                                    <!-- ko foreachKv: value -->
                                      <!-- ko template: { name: 'relationship-group' } -->
                                      <!-- /ko -->
                                    <!-- /ko -->
                                  </dl>
                                <!-- /ko -->
                              <!-- /ko -->
                            </dd>
                          <!-- /ko -->
                        <!-- /ko -->
                      <!-- /ko -->

                      <!-- ko if: key != 'work' -->
                        <!-- ko foreachKv: value -->
                          <!-- ko template: { name: 'relationship-group' } -->
                          <!-- /ko -->
                        <!-- /ko -->
                      <!-- /ko -->
                    </dl>
                  </div>
                <!-- /ko -->
              </td>
              <!-- ko if: $root.showArtists -->
                <td data-bind="foreach: artistCredit"
                  ><a href="#" data-bind="text: name"></a
                  ><!-- ko text: joinPhrase --><!-- /ko --> </td>
              <!-- /ko -->
              [% UNLESS hide_rating %]
              <td class="rating c">[% rating_stars(recording) %]</td>
              [% END %]
              <td class="treleases" data-bind="text: MB.utility.formatTrackLength(length())">
              </td>
            </tr>
          <!-- /ko -->

          <!-- Invalid HTML, commenting out for now.  See MBS-5244.
            <div [% rdfa_about_attr(rdfa_tracklist_curi(medium)) %] [% rdfa_typeof(rdfa_concept_curi('medium')) %]>
          -->
        <!-- /ko -->
      </tbody>
    </table>
    <!-- /ko -->

    [% USE JSON.Escape %]
    <script>
      MB.Release.init(
      [%-
        mediums = [];
        FOR medium = release.mediums;
          tracks = [];

          FOR track = medium.tracks;
            artist_credits = [];

            FOR credit = track.artist_credit.names;
              artist_credits.push({
                name => credit.name,
                joinPhrase => credit.join_phrase
              });
            END;

            relationships = [];
            FOR relationship = track.recording.relationships;
              subRelationships = [];
              FOR subRelationship = relationship.target.relationships;
                subRelationships.push({
                  target => {
                    gid => subRelationship.target.gid,
                    type => subRelationship.target_type,
                    name => subRelationship.target.name,
                    sortname => subRelationship.target.sort_name,
                    comment => subRelationship.target.comment
                  },
                  phrase => subRelationship.phrase
                });
              END;

              relationships.push({
                target => {
                  type => relationship.target_type,
                  name => relationship.target.name,
                  comment => relationship.target.comment
                },
                phrase => relationship.phrase,
                subRelationships => subRelationships
              });
            END;

            tracks.push({
              position => track.position,
              number => track.number,
              name => track.name,
              length => track.length,
              editsPending => track.edits_pending,
              artistCredit => artist_credits,
              recording => {
                relationships => relationships,
                mbid => track.recording.gid
              }
            });
          END;

          mediums.push({
            name => medium.name,
            tracks => tracks,
            position => medium.position,
            format => medium.format.l_name
          });
        END;

        mediums.json;
      %]
      )
    </script>

    <script type="text/javascript">
    $(function() {
        MB.utility.rememberCheckbox("#bottom-credits", "bottom-credits");

        var $bottom_tables = $("table.details");
        var $inline_ars = $("table.tbl div.ars");

        function switchToInlineCredits() {
            $bottom_tables.each(function(i, table) {
                var $table = $(table);
                var $trs = $table.find("tr");

                $trs.each(function(j, tr) {
                    var $tr = $(tr);

                    $tr.find("div.release-rel").length == 0
                        ? $tr.hide() : $tr.find("div.track-rel").hide();
                });

                if ($trs.filter(":visible").length == 0)
                    $table.hide();
            });
            $inline_ars.show();
        }

        function switchToBottomCredits() {
            $bottom_tables.show().find("tr, div.track-rel").show();
            $inline_ars.hide();
        }

        $("a.bottom-credits, a.inline-credits").bind("click.mb", function(event) {
            $("#bottom-credits")
                .prop("checked", !$("#bottom-credits").is(":checked"))
                .trigger("change");
            event.preventDefault();
            return false;
        });

        $("#bottom-credits").change(function() {
            $("a.bottom-credits").toggle(!this.checked);
            $("a.inline-credits").toggle(this.checked);
            this.checked ? switchToBottomCredits() : switchToInlineCredits();
            $("#no-relationships")
                .toggle($bottom_tables.filter(":visible").length == 0);
        }).trigger("change");
    });
    </script>

    <h2 class="relationships">[% l("Relationships") %]</h2>

    [% FOR group=combined_rels.pairs %]
        <table class="details" style="width: 100%; margin-bottom: 1em;">
        [%- FOREACH key IN group.value -%]
            <tr>
                <th>[% key.phrase %]:</th>
                <td>
                    [% release_rels = 0 %]
                    [% FOREACH item IN key.items %]
                        [% release_rels = release_rels || item.release %]
                        [% IF item.tracks.size %]
                          <div class="track-rel">
                          [% relationship_target_links(item.rel) %]
                            <span class="comment">
                              ([% ln('track {tracks}', 'tracks {tracks}',
                                    item.track_count, { tracks => item.tracks })
                                %])
                            </span>
                          </div>
                        [% END %]
                    [% END %]
                    [% IF release_rels %]
                      [% FOREACH item IN key.items %]
                          [% IF item.release %]
                          <div class="release-rel">
                            [% relationship_target_links(item.rel) %]
                            [% relationship_edit_links(item.rel) -%]
                          </div>
                          [% END %]
                      [% END %]
                    [% END %]
                </td>
            </tr>
        [%- END -%]
        </table>
    [% END %]

    <p id="no-relationships" style="display: none;">
        [% l('{link} has no relationships.', { link => link_entity(release) }) -%]
    </p>

[%- END -%]
