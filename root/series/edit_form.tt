[% script_manifest('guess-case.js.manifest') %]
[% script_manifest('edit.js.manifest') %]

<p>[%- l('For more information, check the {doc_doc|documentation} and {doc_styleguide|style guidelines}.', {doc_doc => doc_link('Series'), doc_styleguide => doc_link('Style/Series')}) -%]</p>

<form action="[% c.req.uri %]" method="post" class="edit-series">
    [%- USE r = FormRenderer(form) -%]

    <div class="half-width">

      [% IF form.has_duplicates %]
      <fieldset>
          <legend>[% l('Possible Duplicate Series') %]</legend>
          <p>
              [% l('We found the following series with very similar names:') %]
          </p>
          <ul>
              [% FOREACH dupe=form.duplicates %]
              <li>[% link_entity(dupe) %]</li>
              [% END %]
          </ul>
          [% form_row_checkbox(r, 'not_dupe', l('Yes, I still want to create a new series.')) %]
          <p>
              [%- l('Please enter a {doc_disambiguation|disambiguation} to help distinguish this series from the others.' {doc_disambiguation => doc_link('Disambiguation_Comment')}) -%]
          </p>
      </fieldset>
      [% END %]

      <fieldset>
        <legend>[% l('Series Details') %]</legend>
        [%- form_row_text_long(r, 'name', l('Name:')) -%]
        [%- form_row_text_long(r, 'comment', l('Disambiguation:')) -%]
        [%- form_row_select(r, 'type_id', l('Type:')) -%]
        [%- form_row_select(r, 'ordering_attribute_id', l('Ordering Attribute:')) -%]
        [%- form_row_select(r, 'ordering_type_id', l('Ordering Type:')) -%]
      </fieldset>

      [% PROCESS 'forms/relationship-editor.tt' %]

      <fieldset>
        <legend>[% l('External Links') %]</legend>
        [% external_links_editor(r.form, 'series') %]
      </fieldset>

      [% INCLUDE 'forms/edit-note.tt' %]

      [% enter_edit() %]
  </div>

  <div class="documentation">
    [%- guesscase_bubble(1) -%]
    [%- external_link_bubble() -%]

    <div class="bubble" id="series-type-bubble" data-bind="bubble: typeBubble">
      <p data-bind="text: target() ? target().typeDescription() : ''"></p>
    </div>

    <div class="bubble" id="ordering-attribute-bubble" data-bind="bubble: orderingAttributeBubble">
      <p data-bind="text: target() ? target().orderingAttributeDescription() : ''"></p>
    </div>

    <div class="bubble" id="ordering-type-bubble" data-bind="bubble: orderingTypeBubble">
      <p data-bind="text: target() ? target().orderingTypeDescription() : ''"></p>
    </div>
  </div>

</form>

<script>//<![CDATA[
$(function () {
  MB.seriesTypesByID = [% series_types %];
  MB.orderingTypesByID = [% series_ordering_types %];

  var $type = $("#id-edit-series\\.type_id");
  var $orderingAttribute = $("#id-edit-series\\.ordering_attribute_id");
  var $orderingType = $("#id-edit-series\\.ordering_type_id");

  var seriesDetails = {
    typeID:                   ko.observable($type.val()),
    orderingAttributeID:      ko.observable($orderingAttribute.val()),
    orderingTypeID:           ko.observable($orderingType.val()),
    typeBubble:               MB.Control.BubbleDoc(),
    orderingAttributeBubble:  MB.Control.BubbleDoc(),
    orderingTypeBubble:       MB.Control.BubbleDoc()
  };

  seriesDetails.typeDescription = ko.computed(function () {
    return MB.seriesTypesByID[seriesDetails.typeID()].description;
  });

  seriesDetails.orderingAttributeDescription = ko.computed(function () {
    return MB.attrInfoByID[seriesDetails.orderingAttributeID()].description;
  });

  seriesDetails.orderingTypeDescription = ko.computed(function () {
    return MB.orderingTypesByID[seriesDetails.orderingTypeID()].description;
  });

  ko.applyBindingsToNode($type[0], { value: seriesDetails.typeID, controlsBubble: seriesDetails.typeBubble }, seriesDetails);
  ko.applyBindingsToNode($orderingAttribute[0], { value: seriesDetails.orderingAttributeID, controlsBubble: seriesDetails.orderingAttributeBubble }, seriesDetails);
  ko.applyBindingsToNode($orderingType[0], { value: seriesDetails.orderingTypeID, controlsBubble: seriesDetails.orderingTypeBubble }, seriesDetails);

  ko.applyBindings(seriesDetails, $("#series-type-bubble")[0]);
  ko.applyBindings(seriesDetails, $("#ordering-attribute-bubble")[0]);
  ko.applyBindings(seriesDetails, $("#ordering-type-bubble")[0]);

  MB.Control.initialize_guess_case("series", "id-edit-series");
  MB.utility.setDefaultAction("form.edit-series", "button.submit.positive");

  // FIXME: Use knockout.
  $orderingAttribute.on("change", function () {
    var series = MB.entityCache[MB.sourceEntityGID];

    series.orderingAttributeID(+this.value);
  });

  $orderingType.on("change", function () {
    var series = MB.entityCache[MB.sourceEntityGID];

    series.orderingTypeID(+this.value);

    if (this.value == MB.constants.SERIES_ORDERING_TYPE_AUTOMATIC) {
      _.each(series.relationships(), function (r) {
        var target = r.target(series);

        if (r.entityIsOrdered && r.entityIsOrdered(target)) {
          r.linkOrder(r.original.linkOrder);
        }
      });
    }
  });
});
//]]></script>
